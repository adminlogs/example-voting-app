pipeline
{
	agent none
	stages{
		stage("build"){
			agent {
				docker
				{
					image 'python:2.7.16-slim'
					args '--user root'
				}
			}
			when{
				changeset "**/vote/**"
			}
			steps
			{
				echo 'Compiling vote app'
				dir('vote'){
				sh 'pip install -r requirements.txt'
				}
			}
		}
		stage("test"){
			agent {
				docker
				{
					image 'python:2.7.16-slim'
					args '--user root'
				}
			}
			when{
				changeset "**/vote/**"
			}
			steps{
				echo 'Running Unit Tests on vote application'
				dir('vote'){
				sh 'nose2 -v'
				}
			}
		}
		stage("docker-package"){
			agent any
                        when{
                        	branch 'master'
                                changeset "**/vote/**"
                        }
                        steps{
                                echo 'Packaging vote app with docker'
				script
				{
					docker.withRegistry('https://registry-1.docker.io/v2/', 'dockerlogin')
					{
						def workerImage = docker.build("adelelearning/vote:v${env.BUILD_ID}", "./vote")
						workerImage.push()
						workerImage.push("${env.BRANCH_NAME}")
					}
				}
                        }
                }
	}
	post{
		always{
			echo 'Building multibranch pipeline for vote is completed..'
		}
		success{
			slackSend(channel: "#instavote-cd", message: "Build succedded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
		}
		failure{
			slackSend(channel: "#instavote-cd", message: "Build failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
		}
	}
}
